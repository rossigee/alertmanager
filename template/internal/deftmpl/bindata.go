// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\xfd\x73\xda\x36\xff\xbf\xfb\xaf\xf8\xcc\xbb\xef\xad\xe9\x01\x26\xe9\x9a\xef\x42\x20\xcf\x51\xe2\x34\xbe\x87\x40\x0e\x9c\x76\xbd\xdd\x2e\x27\x6c\x01\x6a\x6d\xc9\x93\x64\x08\xcb\xf8\xdf\x9f\x93\x6c\x5e\x0c\x86\x90\x5c\x97\xf0\x3c\x4b\x7b\x5b\x91\xac\xcf\xfb\xab\x2c\xf9\xfe\x1e\x7c\xdc\x27\x14\x83\x79\x7b\x8b\x02\xcc\x65\x88\x28\x1a\x60\x6e\xc2\x74\x5a\x57\xe3\xab\x64\x7c\x7f\x0f\x98\xfa\x30\x9d\x1a\x1b\x41\x6e\x3a\x4d\x05\x75\x7f\x0f\x25\xfb\x4e\x62\x4e\x51\x70\xd3\x69\xc2\x74\x6a\xfd\x68\xe9\x75\xe2\x5f\x1c\x7b\x98\x8c\x30\xaf\xa9\x45\x9d\x74\x90\xc0\xa4\xd8\xb3\xe8\x45\xdc\xfb\x8a\x3d\xa9\xd0\xfe\xa6\x40\xba\x12\xc9\x58\xc0\x5f\x20\xd9\x4d\x14\xcd\x40\x49\x1f\xf0\x1f\xf3\x87\x66\x9f\x70\x42\x07\x0a\xa6\xa2\x60\xb4\x14\xa2\x74\xa1\x67\xe1\x2f\x08\x30\x5d\xa6\xf8\x3b\xa8\x45\x1f\x39\x8b\xa3\x26\xea\xe1\x40\x94\xba\x8c\x4b\xec\x5f\x23\xc2\x45\xe9\x13\x0a\x62\xac\x08\x7e\x65\x84\x82\x09\x0a\x2b\x24\x24\x07\x12\xde\x28\x5c\xa5\x06\x0b\x43\x46\x13\xe0\x83\x74\x6e\x09\xdf\x01\x4c\xa7\x6f\xee\xef\x61\x4c\xe4\x30\xbb\xb8\xd4\xc1\x21\x1b\xe1\x2c\xf5\x16\x0a\xb1\x48\xd5\x98\x47\x7d\xce\xf8\xc1\xfc\xd7\x06\xdb\xf8\x58\x78\x9c\x44\x92\x30\x6a\x6e\xd1\xb1\xc4\x77\x32\xb1\xe3\x6d\x40\x84\x4c\x97\x72\x44\x07\x18\x4a\x30\x9d\x26\x7c\x55\x8c\xc5\xe4\xba\x9e\x94\x56\x8a\x5a\x91\x8a\x7d\x35\xaa\xc1\x5c\x80\x94\xb1\x84\x78\x9d\x52\x26\x91\xe2\x29\x83\x72\x69\xfa\x69\x78\xbb\x2c\xe6\x1e\xae\x24\xc6\xc4\x14\x73\x24\x19\x4f\xdc\xcf\xc8\x51\x54\x46\x07\x22\x40\xde\xb7\x92\x8f\xfb\x28\x0e\x64\x49\x12\x19\xe0\x54\x0b\x12\x87\x51\x80\x64\xd6\x17\x4b\x9b\x54\x9e\xc5\x13\x0b\x15\x02\x61\x1e\xaa\x6c\xa0\xed\x88\xaf\x8f\x82\xa0\x87\xbc\x6f\x6b\xf8\x72\xd9\x57\x48\xe1\x2f\x78\x68\x61\x40\xe8\xb7\x9d\x39\x88\x38\x56\xce\x62\xee\xb6\x7a\x09\xff\x56\x05\xe8\xb4\xb1\x23\x07\xc4\x63\x14\x87\xec\x2b\xd9\x91\x07\xb5\x3e\xe6\xc1\xae\x1c\xef\x2e\x5c\x9f\x31\x99\x24\xc9\x0d\x3e\xe5\x13\xe1\x31\xee\x7f\x47\x6f\x58\xc5\x88\x46\x48\x22\xbe\x4d\xba\x55\x08\x8f\x51\x89\x69\x92\x4d\xdf\xbe\x7d\xfb\x37\x25\xd4\xb7\x6f\xdf\x26\x39\x35\x93\xea\x1e\x4a\xaa\x3b\x0a\x10\xb0\x99\xd2\x37\xf2\x78\x78\xfc\xff\x87\x87\xc7\xbf\x94\x15\xc6\x40\xa8\x2c\x71\xfc\xfe\x28\x19\x6e\x4b\x02\x43\x12\x79\x43\x24\x17\x16\xe6\x2c\x7c\xba\xb1\x56\xb1\x85\x58\x08\x34\x78\x44\x5a\xc9\xf0\x16\x29\x6a\x7e\x2c\x27\x73\x7c\xeb\xb9\xfd\x71\xa9\x6a\x1d\xa3\x17\x90\xd4\x37\x9e\x26\xf1\x26\x8c\x8b\xae\xe0\x69\x09\x60\x1d\x2f\xa1\x42\x22\xea\x61\x91\x83\x77\xad\x98\x6d\xd1\x2a\x8b\xc4\x00\x53\x82\x9f\x6e\xa4\x6d\xc8\xd6\x2d\x94\x06\xc4\x86\x52\x97\x1b\x15\xc6\x4a\xab\x91\x09\xbd\x03\x28\x43\x71\x3a\x35\x92\x49\x48\x26\x75\x51\xdd\xae\x91\x6c\xfc\x6a\x22\xc5\x25\x89\x72\xe8\x75\xb0\x60\xc1\x08\xfb\x2b\x14\x67\xd3\xbb\xd3\x9c\x41\xac\x51\x2d\xee\xa2\x52\xa1\x6b\xfc\xe3\xbd\x29\x63\xf5\x31\x7e\x4a\x60\x1a\xaf\xf6\xdb\x62\xbf\xfa\xb2\xfe\x79\xb0\x86\x2f\xd7\x3e\xcb\x08\xb2\x26\x1a\x11\x4f\x32\xce\x22\xb1\xb0\xbc\x44\x12\xdf\x66\x6d\xf5\x6a\x8e\xc7\x85\xd3\xba\x56\x31\x95\x44\x4e\x6e\x7d\x22\xa2\x00\x4d\x6e\x37\xb4\x27\x0f\xe7\xbe\x75\xcc\x21\xa3\x44\x32\xa5\x90\x5b\xc9\x58\xf0\xc8\xaa\xb2\x8c\x1b\x87\x88\x04\x0b\x3f\x58\xec\x07\x1f\xcd\x65\x16\xd3\x50\x86\x9a\x2d\xa3\xfa\xc3\x79\xbb\xe1\x7e\xb9\xb6\x41\x4d\xc1\xf5\xcd\x87\xa6\xd3\x00\xb3\x68\x59\x9f\xdf\x35\x2c\xeb\xdc\x3d\x87\x5f\x2f\xdd\xab\x26\x1c\x96\xca\xe0\x72\x44\x05\x51\xce\x86\x02\xcb\xb2\x5b\x26\x98\x43\x29\xa3\x8a\x65\x8d\xc7\xe3\xd2\xf8\x5d\x89\xf1\x81\xe5\x76\xac\x3b\x85\xeb\x50\x01\xa7\x3f\x8b\x72\x09\xb2\xe4\x4b\xdf\x3c\x33\xaa\x3f\x14\x8b\x46\x57\x4e\x02\x0c\x88\xfa\xa0\x89\xf8\x98\x13\x65\x50\xd5\x7d\x80\x42\x2d\x2a\x96\x35\x20\x72\x18\xf7\x4a\x1e\x0b\x2d\x25\xc3\x20\xa6\x96\x46\x87\xbc\x04\x5f\x51\x8b\x56\x9c\xa9\x43\x18\x86\xe1\x0e\x31\x5c\x39\x2e\x34\x89\x87\xa9\xc0\xf0\xe6\xca\x71\x0f\x0c\xa3\xc1\xa2\x09\x27\x83\xa1\x84\x37\xde\x01\x1c\x95\x0f\x7f\x86\xab\x04\xa3\x61\x5c\x63\x1e\x12\x21\x08\xa3\x40\x04\x0c\x31\xc7\xbd\x09\x0c\x38\xa2\x12\xfb\x05\xe8\x73\x8c\x81\xf5\xc1\x1b\x22\x3e\xc0\x05\x90\x0c\x10\x9d\x40\x84\xb9\x60\x14\x58\x4f\x22\x42\x95\xff\x23\xf0\x58\x34\x31\x58\x1f\xe4\x90\x08\x10\xac\x2f\xc7\x88\x27\x12\x22\x21\x98\x47\x90\xc4\x3e\xf8\xcc\x8b\x43\x4c\x93\xc0\x85\x3e\x09\xb0\x80\x37\x72\x88\xc1\xec\xa6\x10\xe6\x81\x26\xe2\x63\x14\x18\x84\x82\x7a\x36\x7b\xa4\xb7\xd2\x2c\x96\xc0\xb1\x90\x9c\x68\x2d\x14\x80\x50\x2f\x88\x7d\xc5\xc3\xec\x71\x40\x42\x92\x52\x50\xe0\x5a\x70\x61\x48\x06\xb1\xc0\x05\xcd\x67\x01\x42\xe6\x93\xbe\xfa\x17\x6b\xb1\xa2\xb8\x17\x10\x31\x2c\x80\x4f\x14\xea\x5e\x2c\x71\x01\x84\x9a\xd4\x7a\x2c\x28\x39\x2c\xc6\x41\xe0\x20\x30\x3c\x16\x11\x2c\x40\xcb\xba\xe0\x4e\xaf\x51\xac\x47\x4a\xa1\x32\x55\x91\x50\x33\xe3\x21\x0b\xb3\x92\x10\x61\xf4\x63\x4e\x89\x18\x62\x0d\xe3\x33\x10\x4c\x53\x54\xde\xac\x66\xd4\xf2\x3e\x0b\x02\x36\x56\xa2\x79\x8c\xfa\x24\xdd\x3d\x6b\x23\xa3\x1e\x1b\x61\x2d\x4b\x62\x57\xca\x24\xf1\x12\x75\x6b\x03\x44\x0b\xab\xa6\x8f\xc4\x10\x05\x01\xf4\x70\xaa\x30\xec\x03\xa1\x80\x96\xc4\xe1\x8a\xbc\x6a\xb1\x24\x41\x01\x44\x8c\x6b\x7a\xab\x62\x96\x0c\xc3\xbd\xb4\xa1\xdb\xbe\x70\x3f\xd7\x3b\x36\x38\x5d\xb8\xee\xb4\x3f\x39\xe7\xf6\x39\x98\xf5\x2e\x38\x5d\xb3\x00\x9f\x1d\xf7\xb2\x7d\xe3\xc2\xe7\x7a\xa7\x53\x6f\xb9\x5f\xa0\x7d\x01\xf5\xd6\x17\xf8\xb7\xd3\x3a\x2f\x80\xfd\xeb\x75\xc7\xee\x76\xa1\xdd\x31\x9c\xab\xeb\xa6\x63\x9f\x17\xc0\x69\x35\x9a\x37\xe7\x4e\xeb\x23\x7c\xb8\x71\xa1\xd5\x76\xa1\xe9\x5c\x39\xae\x7d\x0e\x6e\x1b\x14\xc1\x14\x95\x63\x77\x15\xb2\x2b\xbb\xd3\xb8\xac\xb7\xdc\xfa\x07\xa7\xe9\xb8\x5f\x0a\xc6\x85\xe3\xb6\x14\xce\x8b\x76\x07\xea\x70\x5d\xef\xb8\x4e\xe3\xa6\x59\xef\xc0\xf5\x4d\xe7\xba\xdd\xb5\xa1\xde\x3a\x87\x56\xbb\xe5\xb4\x2e\x3a\x4e\xeb\xa3\x7d\x65\xb7\xdc\x12\x38\x2d\x68\xb5\xc1\xfe\x64\xb7\x5c\xe8\x5e\xd6\x9b\x4d\x45\xca\xa8\xdf\xb8\x97\xed\x8e\xe2\x0f\x1a\xed\xeb\x2f\x1d\xe7\xe3\xa5\x0b\x97\xed\xe6\xb9\xdd\xe9\xc2\x07\x1b\x9a\x4e\xfd\x43\xd3\x4e\x48\xb5\xbe\x40\xa3\x59\x77\xae\x0a\x70\x5e\xbf\xaa\x7f\xb4\x35\x54\xdb\xbd\xb4\x3b\x86\x5a\x96\x70\x07\x9f\x2f\x6d\x35\xa5\xe8\xd5\x5b\x50\x6f\xb8\x4e\xbb\xa5\xc4\x68\xb4\x5b\x6e\xa7\xde\x70\x0b\xe0\xb6\x3b\xee\x1c\xf4\xb3\xd3\xb5\x0b\x50\xef\x38\x5d\xa5\x90\x8b\x4e\xfb\xaa\x60\x28\x75\xb6\x2f\xd4\x12\xa7\xa5\xe0\x5a\x76\x82\x45\xa9\x1a\x32\x16\x69\x77\xf4\xf8\xa6\x6b\xcf\x11\xc2\xb9\x5d\x6f\x3a\xad\x8f\x5d\x05\xac\x44\x9c\x2d\x2e\x19\xc5\xe2\x99\x51\xd5\x29\xf0\x2e\x0c\xa8\xa8\xe5\x24\xb6\xc3\x93\x93\x93\x24\x9f\x99\xbb\x2d\x12\x2a\xb9\xd5\xcc\x3e\xa3\xb2\xd8\x47\x21\x09\x26\x15\xf8\xe9\x12\x07\x23\x2c\x89\x87\xa0\x85\x63\xfc\x53\x01\xe6\x13\x05\xa8\x73\x82\x82\x02\x08\x44\x45\x51\x60\x4e\xfa\xa7\xd0\x63\x77\x45\x41\xfe\x54\xb5\x18\x7a\x8c\xfb\x98\x17\x7b\xec\xee\x14\x34\x52\x41\xfe\xc4\x15\x38\xfc\x39\xba\x3b\x85\x10\xf1\x01\xa1\x15\x28\x9f\xaa\xdc\x3a\xc4\xc8\x7f\x49\xfa\x21\x96\x08\x54\x45\xad\x99\x23\x82\xc7\x2a\x8a\x4c\x48\x37\xe0\x35\x73\x4c\x7c\x39\xac\xf9\x78\x44\x3c\x5c\xd4\x83\x97\x53\x16\x58\x33\x76\x95\x31\x8b\xf8\x8f\x98\x8c\x6a\x66\x23\x61\xb5\xe8\x4e\x22\xbc\xc4\xb8\x6a\x45\x2c\x65\xdc\x53\x5d\x09\x04\x96\xb5\x1b\xf7\xa2\xf8\xcb\x0b\xb3\xaf\xdf\x35\xbd\x9c\xb9\xb7\xf5\x22\x55\x4b\x33\x77\x66\x18\x55\x4b\x39\xa5\xfa\xd1\x63\xfe\x04\x88\xc4\xa1\xf0\x58\x84\x6b\xa6\xa9\x07\x72\xa2\x7e\xa7\x11\x25\xbc\x21\x0e\x91\x8e\x28\x5b\x55\xf7\xab\x59\xef\xfb\xac\x42\x16\xc7\xb8\xf7\x8d\xc8\x62\xf2\x20\x64\x4c\x0e\x35\x50\x52\x1b\x08\x12\xd8\x5f\x2c\x52\xbe\xa1\xa1\x8b\xc8\xff\x1a\x0b\x59\x01\xca\x28\x3e\x85\x21\x56\x95\xa9\x02\x87\xe5\xf2\xff\x9d\x42\x40\x28\x2e\xce\xa7\x4a\xc7\x38\x3c\x05\x1d\x01\xc9\x02\xf8\x81\x84\x2a\x58\x10\x95\xa7\xd0\x43\xde\xb7\x01\x67\x31\xf5\x8b\xfa\xd5\x4f\x05\x7e\xec\x1f\xab\xbf\xcb\xea\x87\x08\xf9\xbe\xe6\x4a\x79\x43\x6f\xa0\x57\xd6\xcc\x74\xa5\xa9\xf4\x2d\x51\xef\xb9\xdd\x63\x49\xa4\x1d\xe5\xc8\xe5\x1d\xa0\x2a\xf9\x0b\xe6\x31\x00\xc5\xc1\x33\x67\xd2\x11\xe6\x0a\x49\x50\x44\x01\x19\xd0\x0a\x48\x16\x65\x15\x35\xd2\x0f\x6a\xa6\x64\x91\x79\x56\xb5\xa4\xbf\x60\x34\xc9\xac\xe6\x71\xb9\xfc\xcc\xa1\x92\xcb\x74\xba\xb5\xaa\x40\x2f\x60\xde\xb7\x8c\x6f\x87\xe8\xae\x98\x3a\xc9\x71\xb9\x1c\xdd\x65\x1e\x7a\x01\x46\x5c\x11\x94\xc3\xcc\xfc\xa6\x40\x99\x2b\x07\x50\x2c\xd9\x4a\x48\x64\xb4\xa5\x15\x05\x50\xf5\xc9\xe8\xb9\xdd\x2a\x2b\xef\xaa\x72\xb6\x0b\x31\xe3\x5b\x19\x59\x07\x73\x6a\x67\xa5\x09\x13\x3c\x1c\x04\xe9\xea\x9a\x59\x4e\xc6\x22\x42\xde\x6c\xfc\xac\x82\xa6\x0f\x39\xf2\x49\x2c\x2a\xf0\x4e\xcf\xe5\x24\x80\x7e\x3f\x93\xc5\x12\xb0\x0a\x1c\x46\x77\x20\x58\x40\x7c\xf8\x11\x9f\xa8\xbf\xd9\xc4\xd0\xef\x2f\xe9\x62\x1f\xb2\xc3\x82\x93\xe7\xcb\x12\xc7\x1b\x03\x2e\xa3\x5d\x0d\x32\x4e\x4b\xcd\xfb\x72\xf9\x14\x74\x89\x4a\xd7\x7b\x98\x4a\xcc\xf3\xec\xa5\xff\x2b\x6b\xa3\xac\xdb\xcd\x3e\x7e\x7f\x74\xd4\xc8\x2f\x40\x47\xca\xaf\x4d\x48\xe3\x2d\x21\xb0\x6c\xbd\x04\x36\x3f\x22\x67\x7f\x16\x27\x2c\xf3\xa3\x15\xd0\x2f\x4b\x72\xdf\x25\x1d\xc0\x21\x4c\xa7\x62\xfe\xc2\x03\xfa\x8c\xc3\xe2\x58\x75\xc3\xb1\x36\x4c\xa7\x2b\x54\x61\xf9\x90\xb5\x96\x39\x62\x5d\x5b\x96\xbe\x5a\xc9\x18\x7f\x9e\x83\xe7\x63\xfe\xea\xa6\xbb\x14\xb3\x85\xf3\x1c\x26\xce\xb3\xcd\x37\xf6\x3e\xf7\x6d\x54\xfb\x7e\x39\xc1\xbe\xbb\x42\x19\xca\xb3\x5c\xb2\xcd\x1d\x52\x31\x10\x0c\x39\xee\xd7\xcc\x5d\x5e\xba\x3f\xb3\x3f\xcc\x92\xe6\xc5\xc5\x45\x9a\x7c\x7d\xec\x31\xae\xdf\xc9\xcd\xb6\x07\x99\x0d\xc1\x91\xda\x0e\x64\xf2\x76\x8f\x05\x7e\x7e\xe2\xf6\x62\x2e\x14\xf6\x88\x91\x64\x62\xde\x50\x10\xaa\x91\xa6\x7d\xc5\x4a\x82\x7f\xaf\x18\xd3\xf8\xf4\x4b\xd4\x3e\xe3\x61\x05\x3c\x14\x11\x89\x02\xf2\x27\xce\x4d\xfa\xef\x7e\xfe\x05\xfb\x28\xa7\x5e\xaf\xad\x48\xa7\xb5\x96\x2b\x49\x21\x9f\x4f\xce\xbb\xb7\xe8\x2e\x35\xef\xd9\x27\x82\xc7\x40\x28\x3c\xf8\x76\xbc\x6a\xa1\x5c\x1f\x5e\x49\xbc\xf9\xe9\x37\xf9\xf3\xd0\xe1\x47\x4e\x51\x78\x0d\xd9\xbf\x27\x64\x85\xe4\x8c\x0e\x5e\x4e\xb5\xbf\x6d\xbe\xc7\xf1\x7b\x7a\xf2\x55\xb5\x12\x26\xbf\x83\xd7\xe5\x34\x0c\xe9\x93\xd9\xed\xaf\xd5\x23\xb4\x57\x3f\xfc\x67\xf8\x61\xd2\x9a\xce\x5d\xad\xda\x7b\x39\x33\x83\x95\xaf\xa3\x07\xae\x3d\x6e\xbe\x9b\xf8\xc2\xc2\x6c\x8e\x3b\xc8\xa9\x05\x8b\x43\xf4\xa4\x12\xbc\xb8\x67\x2c\x71\xb4\x2f\xee\xf1\xa0\x46\x1f\xbc\xcb\xfa\x5f\xea\x2c\xcb\x1d\xe6\xea\xe5\xda\x17\x6a\x28\x67\xed\xd6\x5a\x4f\x19\x53\x1f\x73\xd5\xfd\x65\xdd\x29\xb9\x1e\xac\x9a\xa8\xfd\xcb\x31\x4f\xab\xa6\x3b\xb6\x77\xcb\x77\x4d\x72\xcd\xfb\xda\x15\xee\x4d\x35\xde\x3b\xcf\x04\xa8\x0e\xf7\x90\xa7\xbd\xd3\xd3\x63\x22\x78\x5b\x47\xfc\x1a\x58\xff\x9b\x6d\xee\xf2\x76\x6b\x7e\x67\x6f\xb1\xe1\x9a\x4d\xbd\xc0\x96\x6b\xf9\x06\xe1\xab\x37\xfe\x33\xbc\xf1\x75\xd3\xf5\xba\xe9\x7a\xdd\x74\xed\xbb\xb3\xbc\x6e\xba\xf6\xa6\x65\xdb\x64\xa8\xaa\xa5\xcf\xe3\xce\x1e\x71\x14\x3a\x07\x59\xcc\x3c\xfb\x4d\x8c\xcc\xd5\xa4\xa5\x9b\x26\x0b\x43\x9f\x9c\x9c\x6c\x3b\xe0\xce\x9e\xec\xae\x1f\x49\xee\x47\xd3\xb0\x4f\xed\xcb\x73\xb6\x2e\x47\x1b\x5b\x97\xdc\x43\xb4\x87\x4c\xbe\xd4\xdb\xac\xdc\x6b\xc8\xde\xc2\x5a\x4e\x57\xd9\xcf\xff\x9f\xcf\x21\x8e\x96\xb3\x95\x96\x68\xe7\x54\x85\xa9\x84\xde\x64\xb7\x73\xb8\xf5\xdc\xb1\x76\xdf\x61\x35\x33\x54\x2d\x9f\x8c\xce\x92\xff\x1b\xd9\x34\xb1\x6f\x6d\xed\x86\xeb\x75\x89\x88\x8b\xfc\x55\xb5\x7a\xcc\x9f\xa8\x99\xa1\x0c\x83\x33\xc3\xc8\xff\x7e\x27\x8a\xc5\x90\x8d\x30\xff\x0e\x9f\xd7\xaf\xa1\xfa\xfb\xbf\x07\xfb\x3e\x9f\x83\xed\xfe\x35\xd8\xf7\xfb\x18\x6c\x89\xe6\x0e\x9a\x5c\x7c\x45\xfe\x88\xcf\x2a\xff\x13\x00\x00\xff\xff\x7c\x71\xad\x37\x3c\x44\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 17468, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
